from discord.ext import commands
import random
import time

class MessageCog(commands.Cog):

    def __init__(self, bot):
        self.bot = bot
        self.processed_messages = set()
        self.message_timestamps = {}
        self.cleanup_interval = 3600  # 1 hour
        self.last_cleanup = time.time()
        self.consecutive_message_count = {}
        self.responses_dict = {
            'hi': 'ch√†o cc',
            'bye': 's·ªßi cmm lu√¥n ƒëi',
            'dead_chat': ['dead cc', 'Dead m·∫£ cha m nh√©'],
            'russian': 'NO RUSSIAN',
            'ukrainian': None,
            'sui': lambda m: f'{m.author.display_name} *s·∫Ω im l·∫∑ng v√† bi·∫øn m·∫•t...*',
            'dmcs': lambda m: f'{m.author.display_name}\nhttps://th.bing.com/th/id/R.2f1a48275690965a28da2930ea9d85dd?rik=%2fu7q7c6PPfn6wA&pid=ImgRaw&r=0',
            'non': '√äu, c√≥ con g√† non ch∆∞a k√¨a',
            'ngot': 'c·∫©n th·∫≠n b·ªã ti·ªÉu ƒë∆∞·ªùng',
            'overthinking': "Why we overthinking when we can ||Ov3Rdo$$3||. :3",
            'about': 'V·ªÅ bot chu·ªôt. Bot chu·ªôt l√† con bot r·∫•t l√°o v√† ·ªïn l√†o, v√† b·∫°n g√µ slash /info ƒë·∫•y dumb, tao kh√¥ng hi·ªÉu t·∫°i sao th·∫±ng kia n√≥ l·∫°i l√†m c√°i n√†y, bot c√≥ l·ªánh slash h·∫øt r·ªìi',
            'kevin': '<@868475751459094580>',
            'pholotino': 'Kh√¥ng bi·∫øt anh Th√†nh V≈© c√≥ bi·∫øt T√∫ c√≥ Ny hay kh√¥ngüòóüòó ...',  # shortened for brevity
            'jack': [
                'Idol t√¥i l√† JACK ƒë√≥ r·ªìi sao üôÇ? ƒê·ªëi v·ªõi nh·ªØng ng∆∞·ªùi gh√©t JACK,ƒê√ìM ch√∫ng t√¥i l√† Ru·ªìi ƒë√≥ r·ªìi sao üôÇ? Li√™n quan g√¨ ? T√¥i n√≥i idol t√¥i ƒë·∫πp ch·ª© ƒë√¢u ph·∫£i m·∫•y ng∆∞·ªùi n√≥i ƒë√¢u ? ·ª¶a b·ªã g√¨ v·∫≠y? Nh·ªØng ng∆∞·ªùi fan JACK c≈©ng ƒë·ªÅu b·ªã anti m·∫•y ng∆∞·ªùi ch·ª≠i ƒë√≥ ? Kh√¥ng li√™n quan l·∫Øm nh∆∞ng m√† chuy·ªán cuat ng∆∞·ªùi ta x√≠a m·ªìm v√†o l√†m g√¨ ? R·∫£nh qu√° ƒëi soi chuy·ªán ng∆∞·ªùi kh√°c c√≥ th·∫•y tr·∫ª con qu√° kh√¥ng?L√∫c JACK ch∆∞a l√™n ti·∫øng g√¨ c·∫£ th√¨ c≈©ng bu v√†o x·ªâ x√≥ gi·ªù JACK l√™n ti·∫øng r·ªìi th√¨ c≈©ng x·ªâ x√≥ bu v√†o ph·∫´n n·ªô b√†i vi·∫øt.r·ªìi l√†m v·∫≠y c√≥ √≠ch g√¨? C√≥ t·ªët l√†nh g√¨ kh√¥ng? R·ªìi nh·ªØng ng∆∞·ªùi n·ªïi ti·∫øng kh√°c c≈©ng l√† fan ·∫¢NH v√†o cmt tus ·∫¢NH c≈©ng bay v√¥ ch·ª≠i h·ªç ? ·ª¶a r·ªìi ng∆∞·ªùi m√¨nh ng∆∞·ª°ng m·ªô fan ng∆∞·ªùi m√¨nh anti r·ªìi t·ª©c bay v√†o ch·ª≠i √† ? N√≥i n√†y n√≥i n·ªç b·∫£o ‚ÄúThi·∫øu fame‚Äù ·ªßa thi·∫øu fane l√† thi·∫øu fame l√†m sao? ·ª¶a t·ª± nhi√™n fan anh JACK c√°i b·∫£o thi·∫øu fame r·∫£nh v·ª´a th√¥i ch·ª©? V√†o group c·ªßa ƒê√ìM r·ªìi v√†o t·ª´ng b√†i vi·∫øt ch·ª≠i ? ·ª¶a l√†m v·∫≠y ƒë·ªÉ cho ng∆∞·ªùi kh√°c gh√©t m√¨nh h∆°n √†? M·∫•y ng∆∞·ªùi l√† anti th√¨ c√≥ li√™n quan g√¨ t·ªõi ng∆∞·ªùi m√† m√¨nh anti kh√¥ng m√† bu v√†o ch·ª≠i ? n√≥i chung l√† We‚Äôre no strangers to love, You know the rules and so do I. A full commitment‚Äôs what I‚Äôm thinking of You wouldnt get this from any other guy. I just wanna tell you how I‚Äôm feeling, Gotta make you understand... Never gonna give you up, Never gonna let you down, Never gonna run around and desert you.',  # shortened for brevity
                'ƒê·ª´nq üëê bao z·ªù üòè gk√©t üò° a Jack üò¢üò≠...'  # shortened for brevity
            ],
            'link': 'https://media.discordapp.net/attachments/883268139922636820/1287350064276045824/278755226_745698233463800_1291647474017004061_n.png?ex=66f139ad&is=66efe82d&hm=691315948a3b26a3d54e02820608b560bba49b35bf5b5c7b6812774e01660bd5&=&format=webp&quality=lossless&width=200&height=252',
            'thai_land': [
                'ƒÇn l·∫©u cay 5-3',
                "thai lan tuon loi",
                "ƒë√° ngu nh∆∞ b√≤ b√†y ƒë·∫∑t k√™u th·ªß m√¥n l√™n",
                "https://media.discordapp.net/attachments/882972000585388042/1325482803709743124/472357483_1876023823201095_175475186867281871_n.png?ex=677bf38e&is=677aa20e&hm=2cfb45bcb451705ddacbabb4dd447ca2cf0dc92885b9eb25e9d59bf41476ac95&=&format=webp&quality=lossless&width=400&height=225"
            ],
            'lien_quan': ['game 3 chi√™u r√°c ok?', 'game tr·∫ª con qua v∆∞∆°ng gi·∫£ ch∆°i ƒëi', 'c√≥ c√°i skin th√¥i c≈©ng b·ªã cu·ªóm m·∫•t hi·ªáu ·ª©ng','cho b√†n c·ªï solo flo flo t·∫Øt m√µm','m·∫•y b√© tr·∫©u tre ·∫£o nak qua m√∫a h√†n t√≠n gi√πm c√°i',
                          ],
            'gay': ['Th·∫±ng v·ª´a nh·∫Øn "Gay" l√† gay v√† r·∫•t th√≠ch xem kumalala, thug hunter, ambatukam, boku no pico, v√† c√°c th·ªÉ lo·∫°i kh√°c']
        }

    @commands.Cog.listener()
    async def on_message(self, message):
        try:
            if message.author.bot or message.id in self.processed_messages:
                return

            self.processed_messages.add(message.id)
            current_time = time.time()

            if current_time - self.last_cleanup > self.cleanup_interval:
                self.cleanup_processed_messages()
                self.last_cleanup = current_time

            message_key = (message.channel.id, message.author.id, message.content)
            if message_key in self.message_timestamps and current_time - self.message_timestamps[message_key] < 2:
                return

            self.message_timestamps[message_key] = current_time

            # Track consecutive messages
            if message_key not in self.consecutive_message_count:
                self.consecutive_message_count[message_key] = 0
            self.consecutive_message_count[message_key] += 1

            if self.consecutive_message_count[message_key] > 4:
                return

            responses = {
                'hi': ['ch√†o', 'hi', 'hello', 'chao'],
                'bye': ['bye'],
                'dead_chat': ['dead chat'],
                'russian': ['russian'],
                'ukrainian': ['ukrainian'],
                'sui': ['sui', 's·ªßi'],
                'dmcs': ['dmcs', 'ƒëmcs'],
                'non': ['non'],
                'ngot': ['ng·ªçt', 'ngot'],
                'overthinking': ['overthinking'],
                'about': ['v·ªÅ bot chu·ªôt', 'about "chuot" bot'],
                'kevin': ['kevin', 'k√™ vin'],
                'pholotino': ['florentino', 'fo lon ti no', 'pholotino'],
                'jack': ['jack', 'tr·ªãnh tr·∫ßn ph∆∞∆°ng tu·∫•n', 'j97', 'trinh tran phuong tuan', 'meo meo', '5 c·ªß', 'jack b·∫øn tre'],
                'link': ['link'],
                "thai_land": ["thailand", "th√°i lan", "thai land", "th√°i land", "th√°i lan"],
                "lien_quan": ["lien quan", "li√™n qu√¢n", "lienquan", "li√™n qu√¢n","liqi","lq"],
                "gay": ['gay']
            }

            message_words = message.content.lower().split()
            for key, keywords in responses.items():
                if any(keyword in message_words if ' ' not in keyword else keyword in message.content.lower() for keyword in keywords):
                    response = self.get_response(key, message)
                    if response:
                        await message.channel.send(response)
                    break

            # Reset the counter if a different message is sent
            self.consecutive_message_count[message_key] = 0

        except Exception as e:
            print(f"Error processing message: {e}")

    def cleanup_processed_messages(self):
        current_time = time.time()
        self.processed_messages = {msg_id for msg_id in self.processed_messages if current_time - self.message_timestamps.get(msg_id, 0) < self.cleanup_interval}
        self.message_timestamps = {key: timestamp for key, timestamp in self.message_timestamps.items() if current_time - timestamp < self.cleanup_interval}
        self.consecutive_message_count = {key: count for key, count in self.consecutive_message_count.items() if current_time - self.message_timestamps.get(key, 0) < self.cleanup_interval}

    def get_response(self, key, message):
        response = self.responses_dict.get(key)
        if callable(response):
            return response(message)
        elif isinstance(response, list):
            return random.choice(response)
        return response

async def setup(bot):
    await bot.add_cog(MessageCog(bot))

