"""
Models v√† classes cho RPS game
"""
import discord
import asyncio
from typing import List, Dict, Optional


class RPSChoiceModal(discord.ui.Modal):
    """Modal ·∫©n ƒë·ªÉ ng∆∞·ªùi ch∆°i ch·ªçn k√©o b√∫a bao"""
    
    def __init__(self, game_view, player: discord.Member):
        super().__init__(title="Ch·ªçn k√©o, b√∫a, bao", timeout=30)  # TƒÉng l√™n 30s
        self.game_view = game_view
        self.player = player
        
        self.choice_input = discord.ui.TextInput(
            label="Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n",
            placeholder="Nh·∫≠p: k√©o, b√∫a, ho·∫∑c bao",
            max_length=4,
            required=False
        )
        self.add_item(self.choice_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        choice = self.choice_input.value.lower().strip()
        
        # Validate choice
        valid_choices = {
            'k√©o': 'K√©o', 'keo': 'K√©o', 'k': 'K√©o',
            'b√∫a': 'B√∫a', 'bua': 'B√∫a', 'b': 'B√∫a',
            'bao': 'Bao', 'gi·∫•y': 'Bao', 'g': 'Bao'
        }
        
        if choice in valid_choices:
            normalized_choice = valid_choices[choice]
            await self.game_view.submit_choice(interaction, self.player, normalized_choice)
        elif choice == "":
            await self.game_view.submit_choice(interaction, self.player, None)
        else:
            await interaction.response.send_message(
                "‚ùå **L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!**\n"
                "‚úÖ Nh·∫≠p: **k√©o**, **b√∫a**, ho·∫∑c **bao**\n"
                "üî• G·ª£i √Ω: k, b, g c≈©ng ƒë∆∞·ª£c nh√©!",
                ephemeral=True
            )


class RPSButtonView(discord.ui.View):
    """View v·ªõi 3 buttons ƒë·ªÉ ch·ªçn k√©o b√∫a bao"""
    
    def __init__(self, game_view, player: discord.Member):
        super().__init__(timeout=30)  # 30 gi√¢y timeout
        self.game_view = game_view
        self.player = player
    
    @discord.ui.button(label="‚úÇÔ∏è K√©o", style=discord.ButtonStyle.secondary, emoji="‚úÇÔ∏è")
    async def choose_scissors(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.game_view.submit_choice(interaction, self.player, "K√©o")
        # Disable all buttons sau khi ch·ªçn
        for item in self.children:
            if isinstance(item, discord.ui.Button):
                item.disabled = True
        await interaction.edit_original_response(view=self)
    
    @discord.ui.button(label="ü™® B√∫a", style=discord.ButtonStyle.secondary, emoji="ü™®")
    async def choose_rock(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.game_view.submit_choice(interaction, self.player, "B√∫a")
        # Disable all buttons sau khi ch·ªçn
        for item in self.children:
            if isinstance(item, discord.ui.Button):
                item.disabled = True
        await interaction.edit_original_response(view=self)
    
    @discord.ui.button(label="üìÑ Bao", style=discord.ButtonStyle.secondary, emoji="üìÑ") 
    async def choose_paper(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.game_view.submit_choice(interaction, self.player, "Bao")
        # Disable all buttons sau khi ch·ªçn
        for item in self.children:
            if isinstance(item, discord.ui.Button):
                item.disabled = True
        await interaction.edit_original_response(view=self)
    
    @discord.ui.button(label="‚ùå B·ªè qua", style=discord.ButtonStyle.danger, emoji="‚ùå")
    async def skip_turn(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.game_view.submit_choice(interaction, self.player, None)
        # Disable all buttons sau khi ch·ªçn
        for item in self.children:
            if isinstance(item, discord.ui.Button):
                item.disabled = True
        await interaction.edit_original_response(view=self)


class ModalSenderView(discord.ui.View):
    """View ƒë·ªÉ g·ª≠i modal qua DM (legacy support)"""
    
    def __init__(self, modal: RPSChoiceModal):
        super().__init__(timeout=30)  # TƒÉng l√™n 30s
        self.modal = modal
    
    @discord.ui.button(label="üéØ Ch·ªçn b·∫±ng text", style=discord.ButtonStyle.secondary)
    async def open_modal(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(self.modal)


def calculate_rps_results(player_choices: Dict[discord.Member, Optional[str]]) -> Dict:
    """T√≠nh to√°n k·∫øt qu·∫£ game RPS"""
    # Th·ªëng k√™ l·ª±a ch·ªçn
    stats = {"K√©o": 0, "B√∫a": 0, "Bao": 0, "None": 0}
    active_players = {}  # Ch·ªâ t√≠nh nh·ªØng ng∆∞·ªùi ch·ªçn
    
    for player, choice in player_choices.items():
        if choice:
            stats[choice] += 1
            active_players[player] = choice
        else:
            stats["None"] += 1
    
    # N·∫øu kh√¥ng c√≥ ai ch·ªçn ho·∫∑c ch·ªâ c√≥ 1 ng∆∞·ªùi ch·ªçn
    if len(active_players) <= 1:
        return {"winners": [], "stats": stats}
    
    # Ki·ªÉm tra c√°c l·ª±a ch·ªçn duy nh·∫•t
    unique_choices = set(active_players.values())
    
    # N·∫øu t·∫•t c·∫£ ch·ªçn gi·ªëng nhau -> h√≤a
    if len(unique_choices) == 1:
        return {"winners": [], "stats": stats}
    
    # N·∫øu c√≥ c·∫£ 3 l·ª±a ch·ªçn -> h√≤a
    if len(unique_choices) == 3:
        return {"winners": [], "stats": stats}
    
    # N·∫øu c√≥ 2 l·ª±a ch·ªçn -> x√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng
    choices = list(unique_choices)
    if set(choices) == {"K√©o", "B√∫a"}:
        winners = [p for p, c in active_players.items() if c == "B√∫a"]
    elif set(choices) == {"B√∫a", "Bao"}:
        winners = [p for p, c in active_players.items() if c == "Bao"]
    elif set(choices) == {"Bao", "K√©o"}:
        winners = [p for p, c in active_players.items() if c == "K√©o"]
    else:
        winners = []
    
    return {"winners": winners, "stats": stats}
